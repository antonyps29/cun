# -*- coding: utf-8 -*-
"""load_dB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MxxA4yfxC7f9717HgHnvT_vsZxZcl_NO
"""

from sqlalchemy import create_engine, text
import pandas as pd
import time


time.sleep(10)
data_load=pd.read_csv('data_predicha.csv')

# Conexión
user     = 'postgres'
password = 'Yessica930218*'
host     = 'localhost'
port     = '5433'
db       = 'prueba_cun'

local_engine = create_engine(f'postgresql+psycopg2://{user}:{password}@{host}:{port}/{db}')

# Crear tabla (si no existe)
create_table_query = """
CREATE TABLE IF NOT EXISTS sales_predictions (
    id SERIAL PRIMARY KEY,
    date DATE,
    product_id INT,
    sales INT,
    price FLOAT,
    category VARCHAR(50),
    temperature FLOAT,
    sales_prediction FLOAT
);
"""

with local_engine.connect() as conn:
    conn.execute(text(create_table_query))

# Subir datos
data_load.to_sql('sales_predictions', con=local_engine, if_exists='replace', index=False)

#Guardar sales_categoria
#engine = create_engine(f'postgresql+psycopg2://{user}:{password}@{host}:{port}/{db}')

# Consulta SQL para sumar ventas y activaciones por categoría
sql_query = """
SELECT category,
       SQRT(AVG(POWER(sales - sales_prediction, 2))) as RMSE
FROM sales_predictions
WHERE sales_predictions IS NOT NULL
GROUP BY 1;
"""


# Ejecutar consulta y cargar en DataFrame
with local_engine.connect() as connection:
    sales_categoria= pd.read_sql(sql=text(sql_query), con=connection)

sales_categoria.to_csv('sales_categoria.csv', index=False)

# ----------------------------
# CONEXIÓN A SUPABASE
# ----------------------------

with local_engine.connect() as connection:
    df_local= pd.read_sql(text("SELECT * FROM sales_predictions order by date"), con=connection)

# credenciales de Supabase
supabase_engine = create_engine(
    'postgresql://postgres:Yessica930218*@db.rdfvymxktuyuinwzhzst.supabase.co:5432/postgres'
)

# Crear la tabla en Supabase si no existe
create_table_supabase = """
CREATE TABLE IF NOT EXISTS sales_predictions (
    id SERIAL PRIMARY KEY,
    date DATE,
    product_id INT,
    sales INT,
    price FLOAT,
    category VARCHAR(50),
    temperature FLOAT,
    sales_prediction FLOAT
);
"""

with supabase_engine.begin() as conn:
    conn.execute(text(create_table_supabase))

# Eliminar datos previos
    conn.execute(text("DELETE FROM sales_predictions"))

# Sube los datos a Supabase
df_local.to_sql('sales_predictions', if_exists='replace',con=supabase_engine, index=False)

print("Datos subidos a Supabase correctamente.")

